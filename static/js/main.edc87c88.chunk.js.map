{"version":3,"sources":["data/states.csv","map.js","loadData.js","dropdownMenu.js","App.js","index.js"],"names":["module","exports","showBottomTipIds","Map","getValue","option","value","renderMap","props","states","brews","selectedOption","counties","zoom","svg","d3","select","remove","mapG","append","width","document","body","clientWidth","height","clientHeight","colorValue","d","properties","margin","innerWidth","innerHeight","attr","projection","scale","translate","Math","min","path","blue","domain","map","interpolator","gUpdate","selectAll","data","gEnter","enter","g","merge","range","call","on","transform","k","brewGUpdate","pointRadius","max","tip","d3Tip","html","name","join","brewTip","name_breweries","city","state","statePaths","statePathsEnter","includes","id","direction","show","this","hide","exit","countyPaths","countyPathsEnter","brewGs","brewGsEnter","Component","loadData","Promise","all","csv","csvFile","then","csvData","stateFeatures","feature","stateJson","objects","features","countyFeatures","rowById","reduce","accumulator","forEach","Object","assign","filter","s","brewToReturn","brewJson","geometry","us","catch","err","console","log","DropdownMenu","drawSelect","options","onOptionClicked","property","text","App","selectedProperty","loadAllData","res","setState","find","o","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.edc87c88.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/states.a2067fe0.csv\";","import React, { Component } from \"react\";\nimport * as d3 from \"d3\";\n\nimport d3Tip from \"d3-tip\";\n\nconst showBottomTipIds = [\n  23,\n  33,\n  50,\n  36,\n  25,\n  9,\n  44,\n  26,\n  55,\n  27,\n  38,\n  46,\n  30,\n  16,\n  53,\n  41\n];\n\nexport default class Map extends Component {\n  getValue = (option, value) => {\n    switch (option) {\n      case \"annual_per_capita_consumption\":\n        return `${value} gallons`;\n      case \"total_beer_consumption\":\n        return `${value} million gallons`;\n      case \"five_yr_consumption_change\":\n        return `${value}%`;\n      case \"bars_resturants_per_1000_people\":\n        return `${value}`;\n      case \"beer_tax_rate\":\n        return `$${value} per gallon`;\n      default:\n        return \"\";\n    }\n  };\n\n  renderMap = () => {\n    const { states, brews, selectedOption, counties } = this.props;\n    let zoom = 5;\n\n    const svg = d3.select(\"svg\");\n    svg.select(\"g\").remove();\n    const mapG = svg.append(\"g\");\n    const width = document.body.clientWidth;\n    const height = document.body.clientHeight;\n    const colorValue = d => +d.properties[selectedOption.value];\n\n    const margin = {\n      top: 25,\n      bottom: 0,\n      left: 10,\n      right: 10\n    };\n\n    const innerWidth = width - margin.left - margin.right;\n    const innerHeight = height - margin.top - margin.bottom;\n\n    svg\n      .attr(\"width\", innerWidth)\n      .attr(\"height\", innerHeight)\n      .attr(\"transform\", `translate(${margin.left},${margin.top})`);\n    // set projection\n    var projection = d3\n      .geoAlbersUsa()\n      .scale(innerWidth)\n      .translate([innerWidth / 2, Math.min((innerWidth / 2) - 75, ((innerHeight /2) - 75))]);\n\n    // create path variable\n    var path = d3.geoPath().projection(projection);\n\n    const blue = d3\n      .scaleSequential()\n      .domain(d3.extent(states.map(colorValue)))\n      .interpolator(d3.interpolateYlGnBu);\n\n    const gUpdate = mapG.selectAll(\"g\").data([null]);\n    const gEnter = gUpdate.enter().append(\"g\");\n    const g = gUpdate.merge(gEnter);\n\n    const scale = d3\n      .scaleSqrt()\n      .domain([0.1, 40])\n      .range([1, 1.2]);\n\n    mapG.call(\n      d3.zoom().on(\"zoom\", () => {\n        zoom = d3.event.transform.k;\n        if (zoom > 40) return;\n        g.attr(\"transform\", d3.event.transform);\n\n        brewGUpdate.attr(\n          \"d\",\n          path.pointRadius(d => scale(Math.max(40 - zoom, 0.1)))\n        );\n      })\n    );\n\n    var tip = d3Tip()\n      .attr(\"class\", \"d3-tip\")\n      .html(d => {\n        return [\n          d.properties.name,\n          `<div><p>${selectedOption.name}: </p><p>${this.getValue(\n            selectedOption.value,\n            d.properties[selectedOption.value]\n          )}</p></div>`\n        ].join(\"\");\n      });\n    mapG.call(tip);\n\n    var brewTip = d3Tip()\n      .attr(\"class\", \"d3-tip\")\n      .html(d => {\n        return [\n          `${d.properties.name_breweries} - ${d.properties.city}, ${d.properties.state}`\n        ].join(\"\");\n      });\n    mapG.call(brewTip);\n\n    const statePaths = g.selectAll(\".states\").data(states);\n\n    const statePathsEnter = statePaths\n      .enter()\n      .append(\"path\")\n      .attr(\"class\", \"states\");\n\n    statePaths\n      .merge(statePathsEnter)\n      .attr(\"d\", path)\n      .attr(\"fill\", d => blue(colorValue(d)))\n      .on(\"mouseover\", function(d) {\n        if (showBottomTipIds.includes(d.id)) {\n          tip.direction(\"s\");\n        } else {\n          tip.direction(\"n\");\n        }\n        tip.show(d, this);\n        d3.select('.d3-tip').attr('x', innerWidth / 2).attr('y', innerHeight / 2);\n      })\n      .on(\"mouseout\", tip.hide);\n\n    statePaths.exit().remove();\n\n    const countyPaths = g.selectAll(\".counties\").data(counties);\n\n    const countyPathsEnter = countyPaths\n      .enter()\n      .append(\"path\")\n      .attr(\"class\", \"counties\");\n\n    countyPaths.merge(countyPathsEnter).attr(\"d\", path);\n\n    const brewGs = g.selectAll(\".breweries\").data(brews);\n    const brewGsEnter = brewGs.enter().append(\"path\");\n    const brewGUpdate = brewGs\n      .merge(brewGsEnter)\n      .attr(\"class\", \"breweries\")\n      .attr(\"d\", path.pointRadius(d => scale(39)))\n      .on(\"mouseover\", function(d) {\n        brewTip.show(d, this);\n      })\n      .on(\"mouseout\", brewTip.hide);\n\n    // const circles = g.selectAll(\"circle\").data(mapPoints);\n\n    // const circlesEnter = circles.enter().append(\"circle\");\n\n    // circles\n    //   .merge(circlesEnter)\n    //   .attr(\"cx\", d => projection(d)[0])\n    //   .attr(\"cy\", d => projection(d)[1])\n    //   .attr(\"r\", \"4px\")\n    //   .attr(\"fill\", \"red\");\n  };\n\n  render() {\n    this.renderMap();\n    return <svg></svg>;\n  }\n}\n","import { csv } from \"d3-fetch\";\nimport stateJson from \"./data/us-json.json\";\nimport csvFile from \"./data/states.csv\";\nimport brewJson from \"./data/open-beer-database-breweries.json\";\n\nimport { feature } from \"topojson\";\n\nexport const loadData = () =>\n  Promise.all([csv(csvFile)])\n    .then(([csvData]) => {\n      const stateFeatures = feature(stateJson, stateJson.objects.states)\n        .features;\n      const countyFeatures = feature(stateJson, stateJson.objects.counties)\n        .features;\n\n      const rowById = csvData.reduce((accumulator, d) => {\n        accumulator[+d.id] = d;\n        return accumulator;\n      }, {});\n\n      stateFeatures.forEach(d => {\n        Object.assign(d.properties, rowById[d.id]);\n      });\n\n      // filter out dc, virgin islands, Puerto Rico\n      const states = stateFeatures.filter(\n        s => s.id !== 11 && s.id !== 72 && s.id !== 78\n      );\n\n      const brewToReturn = brewJson.features.filter(d => d.geometry);\n      return {\n        states,\n        us: stateJson,\n        brews: brewToReturn,\n        counties: countyFeatures\n      };\n    })\n    .catch(err => console.log(err));\n","import React, { Component } from \"react\";\nimport * as d3 from \"d3\";\n\nexport default class DropdownMenu extends Component {\n  componentDidMount() {\n    this.drawSelect();\n  }\n\n  drawSelect = () => {\n    const { options, onOptionClicked, selectedOption } = this.props;\n\n    let select = d3.select(\"#menu\").selectAll(\"select\").data([null]);\n    select = select\n      .enter()\n      .append(\"select\")\n      .merge(select)\n      .attr('class', 'select-css')\n      .on(\"change\", function() {\n        onOptionClicked(this.value);\n      });\n\n    const option = select.selectAll(\"option\").data(options);\n    option\n      .enter()\n      .append(\"option\")\n      .merge(option)\n      .attr(\"value\", d => d.value)\n      .property(\"selected\", d => d.value === selectedOption)\n      .text(d => d.name);\n  };\n\n  render() {\n    return <div id=\"menu\"></div>;\n  }\n}\n","import React, { Component } from \"react\";\nimport Map from \"./map\";\nimport { loadData } from \"./loadData\";\nimport DropdownMenu from \"./dropdownMenu\";\n\nconst options = [\n  {\n    value: \"annual_per_capita_consumption\",\n    name: \"Annual per capita consumption\"\n  },\n  { value: \"total_beer_consumption\", name: \"Total beer consumption\" },\n  { value: \"five_yr_consumption_change\", name: \"5 yr. consumption change\" },\n  {\n    value: \"bars_resturants_per_1000_people\",\n    name: \"Bars and restaurants per 100,000 people\"\n  },\n  { value: \"beer_tax_rate\", name: \"Beer tax rate\" }\n];\n\nexport default class App extends Component {\n  state = {\n    states: [],\n    brews: [],\n    counties: [],\n    us: {},\n    selectedProperty: \"annual_per_capita_consumption\",\n    selectedOption: {\n      value: \"annual_per_capita_consumption\",\n      name: \"Annual per capita consumption\"\n    },\n  };\n  componentDidMount() {\n    this.loadAllData();\n  }\n  \n  loadAllData = () => {\n    loadData().then(res => {\n      this.setState({ states: res.states, us: res.us, brews: res.brews, counties: res.counties });\n    });\n  };\n  onOptionClicked = property => {\n    this.setState({\n      selectedProperty: property,\n      selectedOption: options.find(o => o.value === property)\n    });\n  };\n  \n\n  render() {\n    const { states, selectedOption, brews, counties } = this.state;\n    return <div>\n      <h1>Beer in the USA</h1>\n      <p>zoom in and hover to view Breweries</p>\n      <DropdownMenu options={options} onOptionClicked={this.onOptionClicked} selectedOption={selectedOption} />\n      <Map\n        states={states}\n        counties={counties}\n        brews={brews}\n        selectedOption={selectedOption}\n      />\n    </div>;\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n// import * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();"],"sourceRoot":""}